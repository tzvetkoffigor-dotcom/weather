import re
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
time_units = {
    '–º–∏–Ω—É—Ç–∞': 1, '–º–∏–Ω—É—Ç—ã': 1, '–º–∏–Ω—É—Ç': 1, '–º–∏–Ω—É—Ç—É': 1, '–º–∏–Ω': 1,
    '—á–∞—Å': 60, '—á–∞—Å–∞': 60, '—á–∞—Å–æ–≤': 60, '—á–∞—Å—É': 60, '—á': 60,
    '–¥–µ–Ω—å': 1440, '–¥–Ω—è': 1440, '–¥–Ω–µ–π': 1440, '–¥–Ω—é': 1440,
    '—Å—É—Ç–∫–∏': 1440, '—Å—É—Ç–æ–∫': 1440,
    '–Ω–µ–¥–µ–ª—è': 10080, '–Ω–µ–¥–µ–ª–∏': 10080, '–Ω–µ–¥–µ–ª—å': 10080, '–Ω–µ–¥–µ–ª—é': 10080, 
    '—Å–µ–∫—É–Ω–¥': 1/60, '—Å–µ–∫—É–Ω–¥—ã': 1/60, '—Å–µ–∫—É–Ω–¥–∞': 1/60, '—Å–µ–∫—É–Ω–¥—É': 1/60,
    '–≥–æ–¥': 525600, '–≥–æ–¥–∞': 525600, '–ª–µ—Ç': 525600,
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏)
user_units = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ 30 –º–∏–Ω—É—Ç
‚Ä¢ 1 —á–∞—Å  
‚Ä¢ 2 —á–∞—Å–∞
‚Ä¢ 15 –º–∏–Ω—É—Ç
‚Ä¢ 1/2 –º–∏–Ω—É—Ç—ã
‚Ä¢ 1/4 —á–∞—Å–∞
‚Ä¢ 0.5 —á–∞—Å–∞

üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
‚Ä¢ 30 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ
‚Ä¢ 1 —á–∞—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω
‚Ä¢ 2 —á–∞—Å–∞ –∑–∞–Ω—è—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/addunit [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–º–∏–Ω—É—Ç—ã] - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏
/myunits - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏

–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã:
/addunit –ø–∞—Ä–∞ 90
/addunit –ø–µ—Ä–µ–º–µ–Ω–∞ 15
/addunit —Å–µ—Å—Å–∏—è 45
    """
    await update.message.reply_text(welcome_text)

async def add_unit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addunit [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–º–∏–Ω—É—Ç—ã]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/addunit –ø–∞—Ä–∞ 90\n"
            "/addunit –ø–µ—Ä–µ–º–µ–Ω–∞ 15\n"
            "/addunit —Å–µ—Å—Å–∏—è 45\n\n"
            "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "‚Ä¢ 1 –ø–∞—Ä–∞ = 90 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ 2 –ø–∞—Ä—ã = 180 –º–∏–Ω—É—Ç"
        )
        return
    
    try:
        unit_name = context.args[0].lower()
        multiplier = float(context.args[1])
        
        if multiplier <= 0:
            await update.message.reply_text("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞
        if unit_name in time_units:
            await update.message.reply_text(f"‚ùå –ï–¥–∏–Ω–∏—Ü–∞ '{unit_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in user_units:
            user_units[user_id] = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É
        user_units[user_id][unit_name] = multiplier
        
        await update.message.reply_text(
            f"‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ '{unit_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"1 {unit_name} = {multiplier} –º–∏–Ω—É—Ç\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            f"‚Ä¢ 1 {unit_name}\n"
            f"‚Ä¢ 2 {unit_name}\n"
            f"‚Ä¢ 1/2 {unit_name}\n"
            f"‚Ä¢ 0.5 {unit_name}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

async def my_units(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    
    if user_id not in user_units or not user_units[user_id]:
        await update.message.reply_text(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "/addunit [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–º–∏–Ω—É—Ç—ã]\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/addunit –ø–∞—Ä–∞ 90"
        )
        return
    
    units_text = "üìù –í–∞—à–∏ –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏:\n\n"
    for unit_name, multiplier in user_units[user_id].items():
        units_text += f"‚Ä¢ {unit_name} = {multiplier} –º–∏–Ω—É—Ç\n"
    
    units_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:\n"
    for unit_name in user_units[user_id].keys():
        units_text += f"‚Ä¢ 1 {unit_name}\n"
        units_text += f"‚Ä¢ 2 {unit_name}\n"
    
    await update.message.reply_text(units_text)

async def send_reminder(context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    job = context.job
    reminder_text = job.data.get('reminder_text', '')
    
    if reminder_text:
        message = f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\nüìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
    else:
        message = "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!"
    
    await context.bot.send_message(job.chat_id, text=message)

def parse_time_and_text(text: str, user_id: int):
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """
    original_text = text
    text_lower = text.lower().strip()
    logger.info(f"–ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç: '{text_lower}'")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_units = {**time_units}
    if user_id in user_units:
        all_units.update(user_units[user_id])
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü—ã –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
    # —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    sorted_units = sorted(all_units.items(), key=lambda x: len(x[0]), reverse=True)
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –¥—Ä–æ–±–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    for unit_name, multiplier in sorted_units:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        fraction_pattern = rf'(\d+)/(\d+)\s+{re.escape(unit_name)}\b'
        match = re.search(fraction_pattern, text_lower)
        if match:
            try:
                numerator = float(match.group(1))
                denominator = float(match.group(2))
                if denominator != 0:
                    number = numerator / denominator
                    result = number * multiplier
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ü–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                    time_part = match.group(0)
                    start_pos = match.start()
                    end_pos = match.end()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏)
                    reminder_text = original_text[end_pos:].strip()
                    
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –¥—Ä–æ–±—å: {numerator}/{denominator} {unit_name} = {result} –º–∏–Ω—É—Ç, —Ç–µ–∫—Å—Ç: '{reminder_text}'")
                    return result, reminder_text
            except (ValueError, ZeroDivisionError):
                continue
    
    # –ó–∞—Ç–µ–º –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ —á–∏—Å–ª–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    for unit_name, multiplier in sorted_units:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤
        number_pattern = rf'(\d+\.\d+|\d+)\s+{re.escape(unit_name)}\b'
        match = re.search(number_pattern, text_lower)
        if match:
            try:
                number = float(match.group(1))
                result = number * multiplier
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ü–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                start_pos = match.start()
                end_pos = match.end()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏)
                reminder_text = original_text[end_pos:].strip()
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ: {number} {unit_name} = {result} –º–∏–Ω—É—Ç, —Ç–µ–∫—Å—Ç: '{reminder_text}'")
                return result, reminder_text
            except ValueError:
                continue
    
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è")
    return None, ""

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}'")
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç
    minutes, reminder_text = parse_time_and_text(text, user_id)
    
    if minutes is None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≤ –æ—à–∏–±–∫–µ
        available_units = "‚Ä¢ –º–∏–Ω—É—Ç—ã\n‚Ä¢ —á–∞—Å—ã\n‚Ä¢ –¥–Ω–∏\n‚Ä¢ –Ω–µ–¥–µ–ª–∏\n‚Ä¢ —Å–µ–∫—É–Ω–¥—ã"
        if user_id in user_units:
            available_units += "\n‚Ä¢ " + "\n‚Ä¢ ".join(user_units[user_id].keys())
        
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã:\n{available_units}\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ 30 –º–∏–Ω—É—Ç\n"
            f"‚Ä¢ 1 —á–∞—Å\n"
            f"‚Ä¢ 1/2 —á–∞—Å–∞\n"
            f"‚Ä¢ 0.5 —á–∞—Å–∞\n"
            f"‚Ä¢ 10 —Å–µ–∫—É–Ω–¥\n\n"
            f"üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç:\n"
            f"‚Ä¢ 30 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
            f"‚Ä¢ 1 —á–∞—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω\n"
            f"‚Ä¢ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É"
        )
        return
    
    logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è: {minutes} –º–∏–Ω—É—Ç, —Ç–µ–∫—Å—Ç: '{reminder_text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    if minutes <= 0:
        await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
    seconds = int(minutes * 60)
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥ ({minutes} –º–∏–Ω—É—Ç)")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        context.job_queue.run_once(
            callback=send_reminder,
            when=seconds,
            chat_id=update.effective_chat.id,
            data={'reminder_text': reminder_text}  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        )
        
        logger.info("–¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if minutes < 1:
            seconds_total = int(minutes * 60)
            time_display = f"{seconds_total} —Å–µ–∫—É–Ω–¥"
        elif minutes < 60:
            if minutes == int(minutes):
                time_display = f"{int(minutes)} –º–∏–Ω—É—Ç"
            else:
                time_display = f"{minutes:.1f} –º–∏–Ω—É—Ç"
        else:
            hours = minutes / 60
            if hours == int(hours):
                time_display = f"{int(hours)} —á–∞—Å–æ–≤"
            else:
                time_display = f"{hours:.1f} —á–∞—Å–æ–≤"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if reminder_text:
            confirmation_message = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_display}\nüìù –¢–µ–∫—Å—Ç: {reminder_text}"
        else:
            confirmation_message = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_display}"
        
        await update.message.reply_text(confirmation_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    TOKEN = "8259277645:AAG6Mj32b_kQ0xkKyZjJvuiGz1IvFGwfFec"
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("addunit", add_unit))
        application.add_handler(CommandHandler("myunits", my_units))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()  